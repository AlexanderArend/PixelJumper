package com.grumman.service.pixel;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * The address path we provided will be configured as
 * 			part of the jax-ws endpoint CXF definition.
 * 			The service will map to an
 * 			interface in Java.
 * 		
 *
 * This class was generated by Apache CXF 3.1.7
 * 2016-11-07T14:52:19.534-05:00
 * Generated source version: 3.1.7
 * 
 */
@WebServiceClient(name = "Pixel", 
                  wsdlLocation = "file:/C:/Users/Alexander%20Arend/workspace/PixelJumperSchema/src/main/resources/com/pixel/jumper/schema/PixelJump.wsdl",
                  targetNamespace = "http://www.grumman.com/service/Pixel/") 
public class Pixel_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.grumman.com/service/Pixel/", "Pixel");
    public final static QName PixelSOAP = new QName("http://www.grumman.com/service/Pixel/", "PixelSOAP");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/Alexander%20Arend/workspace/PixelJumperSchema/src/main/resources/com/pixel/jumper/schema/PixelJump.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Pixel_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/Alexander%20Arend/workspace/PixelJumperSchema/src/main/resources/com/pixel/jumper/schema/PixelJump.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Pixel_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Pixel_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Pixel_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Pixel_Service(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Pixel_Service(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Pixel_Service(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns Pixel
     */
    @WebEndpoint(name = "PixelSOAP")
    public Pixel getPixelSOAP() {
        return super.getPort(PixelSOAP, Pixel.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Pixel
     */
    @WebEndpoint(name = "PixelSOAP")
    public Pixel getPixelSOAP(WebServiceFeature... features) {
        return super.getPort(PixelSOAP, Pixel.class, features);
    }

}
